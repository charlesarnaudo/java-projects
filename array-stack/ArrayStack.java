import java.util.Arrays;import java.util.EmptyStackException;/** * A class of stacks whose entries are stored in an array. * * @author Frank M. Carrano and Timothy M. Henry * @version 4.0 */public class ArrayStack<T> implements StackInterface<T> {    private T[] stack;    // Array of stack entries    private int topIndex; // Index of top entry    private boolean initialized = false;    private static final int DEFAULT_CAPACITY = 50;    private static int INITIAL_CAPACITY = 0;    private static final int MAX_CAPACITY = 10000;    public ArrayStack() {        this(DEFAULT_CAPACITY);    } // end default constructor    /**     *     * @param initialCapacity     */    public ArrayStack(int initialCapacity) {        checkCapacity(initialCapacity);        INITIAL_CAPACITY = initialCapacity;        // The cast is safe because the new array contains null entries        @SuppressWarnings("unchecked")        T[] tempStack = (T[]) new Object[initialCapacity];        stack = tempStack;        topIndex = initialCapacity;        initialized = true;    } // end constructor    /**     *     * @param newEntry  An object to be added to the stack.     */    @Override    public void push(T newEntry) {        checkInitialization();        ensureCapacity();        topIndex--;        stack[topIndex] = newEntry;    }    /**     *     * @return     */    @Override    public T pop() {        checkInitialization();        if (isEmpty())            throw new EmptyStackException();        else {            T top = stack[topIndex];            stack[topIndex] = null;            topIndex++;            return top;        }    }    /**     *     * @return     */    @Override    public T peek() {        checkInitialization();        if (isEmpty())            throw new EmptyStackException();        else            return stack[topIndex];    }    /**     *     * @return     */    @Override    public boolean isEmpty() {        return topIndex >= INITIAL_CAPACITY;    }    /**     *     */    @Override    public void clear() {        while (!isEmpty()) {            pop();        }    }//  < Implementations of the stack operations go here. >//  < Implementations of the private methods go here; checkCapacity and//    checkInitialization are analogous to those in Chapter 2. >    /**     *     */    private void checkInitialization() {        if (!initialized) {            throw new SecurityException("ArrayStack object is not initialized " + "properly.");        }    }    /**     *     */    private void ensureCapacity() {        if (topIndex == 0) {            int newLength = 2 * stack.length;            checkCapacity(newLength);            topIndex = stack.length;            stack = Arrays.copyOf(stack, newLength);        }    }    /**     *      * @param i     */    private void checkCapacity(int i) {        if (i > MAX_CAPACITY) {            throw new IllegalStateException("Attempt to create a bag whose " + "capacity exceeds allowed " +                    "maximum of " + MAX_CAPACITY);        }    }}// end ArrayStack